
DIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000660  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000006d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af7  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b9  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3b  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  000038cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bdb  00000000  00000000  00003c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001080  00000000  00000000  00004833  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000058b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  74:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction){
	
	switch(u8_port){
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	89 f0       	breq	.+34     	; 0xa2 <gpioPinDirection+0x26>
  80:	28 f0       	brcs	.+10     	; 0x8c <gpioPinDirection+0x10>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	c9 f0       	breq	.+50     	; 0xb8 <gpioPinDirection+0x3c>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	11 f1       	breq	.+68     	; 0xce <gpioPinDirection+0x52>
  8a:	08 95       	ret
		
		case 0: 
				if ( u8_direction == INPUT )
  8c:	41 11       	cpse	r20, r1
  8e:	05 c0       	rjmp	.+10     	; 0x9a <gpioPinDirection+0x1e>
				{
					PORTA_DIR &= ~(u8_pins); //clear the bits to be inputs
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	60 95       	com	r22
  94:	68 23       	and	r22, r24
  96:	6a bb       	out	0x1a, r22	; 26
  98:	08 95       	ret
				}
				else{
					PORTA_DIR |= u8_pins;
  9a:	8a b3       	in	r24, 0x1a	; 26
  9c:	68 2b       	or	r22, r24
  9e:	6a bb       	out	0x1a, r22	; 26
  a0:	08 95       	ret
				}
					break;
		case 1:
				if ( u8_direction == INPUT )
  a2:	41 11       	cpse	r20, r1
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <gpioPinDirection+0x34>
					{
						PORTB_DIR &= ~(u8_pins); //clear the bits to be inputs
  a6:	87 b3       	in	r24, 0x17	; 23
  a8:	60 95       	com	r22
  aa:	68 23       	and	r22, r24
  ac:	67 bb       	out	0x17, r22	; 23
  ae:	08 95       	ret
					}
					else{
						PORTB_DIR |= u8_pins;
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	68 2b       	or	r22, r24
  b4:	67 bb       	out	0x17, r22	; 23
  b6:	08 95       	ret
					}
						break;
		case 2:
				if ( u8_direction == INPUT )
  b8:	41 11       	cpse	r20, r1
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <gpioPinDirection+0x4a>
				{
					PORTC_DIR &= ~(u8_pins); //clear the bits to be inputs
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	60 95       	com	r22
  c0:	68 23       	and	r22, r24
  c2:	64 bb       	out	0x14, r22	; 20
  c4:	08 95       	ret
				}
				else{
					PORTC_DIR |= u8_pins;
  c6:	84 b3       	in	r24, 0x14	; 20
  c8:	68 2b       	or	r22, r24
  ca:	64 bb       	out	0x14, r22	; 20
  cc:	08 95       	ret
				}
				break;		
		case 3:
				if ( u8_direction == INPUT )
  ce:	41 11       	cpse	r20, r1
  d0:	05 c0       	rjmp	.+10     	; 0xdc <gpioPinDirection+0x60>
				{
					PORTD_DIR &= ~(u8_pins); //clear the bits to be inputs
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	60 95       	com	r22
  d6:	68 23       	and	r22, r24
  d8:	61 bb       	out	0x11, r22	; 17
  da:	08 95       	ret
				}
				else{
					PORTD_DIR |= u8_pins;
  dc:	81 b3       	in	r24, 0x11	; 17
  de:	68 2b       	or	r22, r24
  e0:	61 bb       	out	0x11, r22	; 17
  e2:	08 95       	ret

000000e4 <gpioPinWrite>:
 * 				- BIT7
 * @param value
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value){
	
		switch(u8_port){
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	89 f0       	breq	.+34     	; 0x10a <gpioPinWrite+0x26>
  e8:	28 f0       	brcs	.+10     	; 0xf4 <gpioPinWrite+0x10>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	c9 f0       	breq	.+50     	; 0x120 <gpioPinWrite+0x3c>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	11 f1       	breq	.+68     	; 0x136 <gpioPinWrite+0x52>
  f2:	08 95       	ret
			
			case 0:
					PORTA_DATA &= ~(u8_pins);
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	96 2f       	mov	r25, r22
  f8:	90 95       	com	r25
  fa:	89 23       	and	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
					if (u8_value != LOW)
  fe:	44 23       	and	r20, r20
 100:	21 f1       	breq	.+72     	; 0x14a <gpioPinWrite+0x66>
					{
						PORTA_DATA |= u8_pins;
 102:	8b b3       	in	r24, 0x1b	; 27
 104:	68 2b       	or	r22, r24
 106:	6b bb       	out	0x1b, r22	; 27
 108:	08 95       	ret
					}
					break;
			case 1:
					PORTB_DATA &= ~(u8_pins);
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	96 2f       	mov	r25, r22
 10e:	90 95       	com	r25
 110:	89 23       	and	r24, r25
 112:	88 bb       	out	0x18, r24	; 24
					if (u8_value != LOW)
 114:	44 23       	and	r20, r20
 116:	c9 f0       	breq	.+50     	; 0x14a <gpioPinWrite+0x66>
					{
						PORTB_DATA |= u8_pins;
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	68 2b       	or	r22, r24
 11c:	68 bb       	out	0x18, r22	; 24
 11e:	08 95       	ret
					}	
					break;
			case 2:
					PORTC_DATA &= ~(u8_pins);
 120:	85 b3       	in	r24, 0x15	; 21
 122:	96 2f       	mov	r25, r22
 124:	90 95       	com	r25
 126:	89 23       	and	r24, r25
 128:	85 bb       	out	0x15, r24	; 21
					if (u8_value != LOW)
 12a:	44 23       	and	r20, r20
 12c:	71 f0       	breq	.+28     	; 0x14a <gpioPinWrite+0x66>
					{
						PORTC_DATA |= u8_pins;
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	68 2b       	or	r22, r24
 132:	65 bb       	out	0x15, r22	; 21
 134:	08 95       	ret
					}
					break;
			case 3:
					PORTD_DATA &= ~(u8_pins);
 136:	82 b3       	in	r24, 0x12	; 18
 138:	96 2f       	mov	r25, r22
 13a:	90 95       	com	r25
 13c:	89 23       	and	r24, r25
 13e:	82 bb       	out	0x12, r24	; 18
					if (u8_value != LOW)
 140:	44 23       	and	r20, r20
 142:	19 f0       	breq	.+6      	; 0x14a <gpioPinWrite+0x66>
					{
						PORTD_DATA |= u8_pins;
 144:	82 b3       	in	r24, 0x12	; 18
 146:	68 2b       	or	r22, r24
 148:	62 bb       	out	0x12, r22	; 18
 14a:	08 95       	ret

0000014c <Led_Init>:

#include "led.h"

void Led_Init(En_LedNumber_t en_led_id){
	
	switch(en_led_id){
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	89 f0       	breq	.+34     	; 0x172 <Led_Init+0x26>
 150:	28 f0       	brcs	.+10     	; 0x15c <Led_Init+0x10>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	c9 f0       	breq	.+50     	; 0x188 <Led_Init+0x3c>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	11 f1       	breq	.+68     	; 0x19e <Led_Init+0x52>
 15a:	08 95       	ret
		
		case LED_0:
				gpioPinDirection( LED_0_GPIO, LED_0_BIT, OUTPUT );
 15c:	4f ef       	ldi	r20, 0xFF	; 255
 15e:	60 e1       	ldi	r22, 0x10	; 16
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
				gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	60 e1       	ldi	r22, 0x10	; 16
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 72 00 	call	0xe4	; 0xe4 <gpioPinWrite>
					break;
 170:	08 95       	ret
		case LED_1:
				gpioPinDirection( LED_1_GPIO, LED_1_BIT, OUTPUT );
 172:	4f ef       	ldi	r20, 0xFF	; 255
 174:	60 e2       	ldi	r22, 0x20	; 32
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
				gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);		
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	60 e2       	ldi	r22, 0x20	; 32
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 72 00 	call	0xe4	; 0xe4 <gpioPinWrite>
					break;
 186:	08 95       	ret
		case LED_2:
				gpioPinDirection( LED_2_GPIO, LED_2_BIT, OUTPUT );
 188:	4f ef       	ldi	r20, 0xFF	; 255
 18a:	60 e4       	ldi	r22, 0x40	; 64
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
				gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);		
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	60 e4       	ldi	r22, 0x40	; 64
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 72 00 	call	0xe4	; 0xe4 <gpioPinWrite>
					break;
 19c:	08 95       	ret
		case LED_3:
				gpioPinDirection( LED_3_GPIO, LED_3_BIT, OUTPUT );
 19e:	4f ef       	ldi	r20, 0xFF	; 255
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
				gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);		
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	60 e8       	ldi	r22, 0x80	; 128
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 72 00 	call	0xe4	; 0xe4 <gpioPinWrite>
 1b2:	08 95       	ret

000001b4 <main>:
void REQ2_Start(void);
void REQ3_Start(void);

int main(void)
{
	Led_Init(LED_0);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <Led_Init>
	T0_POLLING);
*/
	
	while(1)
	{
		timer2SwPWM(PORTB_DATA, BIT4, 50, 50);
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	22 e3       	ldi	r18, 0x32	; 50
 1be:	42 e3       	ldi	r20, 0x32	; 50
 1c0:	60 e1       	ldi	r22, 0x10	; 16
 1c2:	0e 94 2b 01 	call	0x256	; 0x256 <timer2SwPWM>
 1c6:	f9 cf       	rjmp	.-14     	; 0x1ba <main+0x6>

000001c8 <timer2Init>:
		
		while(!(TIFR & (1 << 6)));
		TIFR |= (1 << 6); // clear with writing one
	}
	timer2Stop();
}
 1c8:	cf 92       	push	r12
 1ca:	0f 93       	push	r16
 1cc:	95 b5       	in	r25, 0x25	; 37
 1ce:	69 2b       	or	r22, r25
 1d0:	68 2b       	or	r22, r24
 1d2:	65 bd       	out	0x25, r22	; 37
 1d4:	24 bd       	out	0x24, r18	; 36
 1d6:	88 30       	cpi	r24, 0x08	; 8
 1d8:	09 f4       	brne	.+2      	; 0x1dc <timer2Init+0x14>
 1da:	03 bd       	out	0x23, r16	; 35
 1dc:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <T2_prescaler>
 1e0:	89 b7       	in	r24, 0x39	; 57
 1e2:	c8 2a       	or	r12, r24
 1e4:	c9 be       	out	0x39, r12	; 57
 1e6:	0f 91       	pop	r16
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

000001ec <timer2Start>:
 1ec:	95 b5       	in	r25, 0x25	; 37
 1ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <T2_prescaler>
 1f2:	89 2b       	or	r24, r25
 1f4:	85 bd       	out	0x25, r24	; 37
 1f6:	08 95       	ret

000001f8 <timer2DelayUs>:
/**
 * @brief Delay function
 * @param u16_delay_in_us the time in us
 */
void timer2DelayUs(uint32_t u32_delay_in_us)
{
 1f8:	8f 92       	push	r8
 1fa:	9f 92       	push	r9
 1fc:	af 92       	push	r10
 1fe:	bf 92       	push	r11
 200:	cf 92       	push	r12
 202:	ef 92       	push	r14
 204:	0f 93       	push	r16
 206:	4b 01       	movw	r8, r22
 208:	5c 01       	movw	r10, r24
	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, 14, 0, T2_INTERRUPT_CMP);
 20a:	68 94       	set
 20c:	cc 24       	eor	r12, r12
 20e:	c7 f8       	bld	r12, 7
 210:	e1 2c       	mov	r14, r1
 212:	0e e0       	ldi	r16, 0x0E	; 14
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <timer2Init>
	timer2Start();
 220:	0e 94 f6 00 	call	0x1ec	; 0x1ec <timer2Start>
	while(u32_delay_in_us)
 224:	81 14       	cp	r8, r1
 226:	91 04       	cpc	r9, r1
 228:	a1 04       	cpc	r10, r1
 22a:	b1 04       	cpc	r11, r1
 22c:	61 f0       	breq	.+24     	; 0x246 <timer2DelayUs+0x4e>
	{
		while(!(GET_BIT(TIFR,7)));
 22e:	88 b7       	in	r24, 0x38	; 56
 230:	87 70       	andi	r24, 0x07	; 7
 232:	e9 f3       	breq	.-6      	; 0x22e <timer2DelayUs+0x36>
		SET_BIT(TIFR,7);
 234:	88 b7       	in	r24, 0x38	; 56
 236:	80 68       	ori	r24, 0x80	; 128
 238:	88 bf       	out	0x38, r24	; 56
		u32_delay_in_us--;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	88 1a       	sub	r8, r24
 23e:	91 08       	sbc	r9, r1
 240:	a1 08       	sbc	r10, r1
 242:	b1 08       	sbc	r11, r1
 */
void timer2DelayUs(uint32_t u32_delay_in_us)
{
	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, 14, 0, T2_INTERRUPT_CMP);
	timer2Start();
	while(u32_delay_in_us)
 244:	a1 f7       	brne	.-24     	; 0x22e <timer2DelayUs+0x36>
	{
		while(!(GET_BIT(TIFR,7)));
		SET_BIT(TIFR,7);
		u32_delay_in_us--;
	}
}
 246:	0f 91       	pop	r16
 248:	ef 90       	pop	r14
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	08 95       	ret

00000256 <timer2SwPWM>:
 * @brief SW PWM function
 * @param u8_dutyCycle signal duty cycle
 * @param u8_frequency signal frequency
 */
void timer2SwPWM(uint8_t gpio_port, uint8_t gpio_pin, uint8_t u8_dutyCycle, uint8_t u8_frequency)
{
 256:	8f 92       	push	r8
 258:	9f 92       	push	r9
 25a:	af 92       	push	r10
 25c:	bf 92       	push	r11
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	18 2f       	mov	r17, r24
 26e:	d6 2f       	mov	r29, r22
 270:	c4 2f       	mov	r28, r20
	uint32_t Period = (1.00/u8_frequency)*1000000.00;
 272:	62 2f       	mov	r22, r18
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 35 02 	call	0x46a	; 0x46a <__floatsisf>
 27e:	9b 01       	movw	r18, r22
 280:	ac 01       	movw	r20, r24
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	9f e3       	ldi	r25, 0x3F	; 63
 28a:	0e 94 92 01 	call	0x324	; 0x324 <__divsf3>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	34 e2       	ldi	r19, 0x24	; 36
 292:	44 e7       	ldi	r20, 0x74	; 116
 294:	59 e4       	ldi	r21, 0x49	; 73
 296:	0e 94 c1 02 	call	0x582	; 0x582 <__mulsf3>
 29a:	0e 94 04 02 	call	0x408	; 0x408 <__fixunssfsi>
 29e:	6b 01       	movw	r12, r22
 2a0:	7c 01       	movw	r14, r24
	uint32_t Ton = Period * (u8_dutyCycle/100.00);
 2a2:	6c 2f       	mov	r22, r28
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 35 02 	call	0x46a	; 0x46a <__floatsisf>
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	48 ec       	ldi	r20, 0xC8	; 200
 2b4:	52 e4       	ldi	r21, 0x42	; 66
 2b6:	0e 94 92 01 	call	0x324	; 0x324 <__divsf3>
 2ba:	4b 01       	movw	r8, r22
 2bc:	5c 01       	movw	r10, r24
 2be:	c7 01       	movw	r24, r14
 2c0:	b6 01       	movw	r22, r12
 2c2:	0e 94 33 02 	call	0x466	; 0x466 <__floatunsisf>
 2c6:	9b 01       	movw	r18, r22
 2c8:	ac 01       	movw	r20, r24
 2ca:	c5 01       	movw	r24, r10
 2cc:	b4 01       	movw	r22, r8
 2ce:	0e 94 c1 02 	call	0x582	; 0x582 <__mulsf3>
 2d2:	0e 94 04 02 	call	0x408	; 0x408 <__fixunssfsi>
 2d6:	4b 01       	movw	r8, r22
 2d8:	5c 01       	movw	r10, r24
	uint32_t Toff = Period - Ton;
 2da:	c6 1a       	sub	r12, r22
 2dc:	d7 0a       	sbc	r13, r23
 2de:	e8 0a       	sbc	r14, r24
 2e0:	f9 0a       	sbc	r15, r25
 2e2:	c4 e1       	ldi	r28, 0x14	; 20
	uint8_t cycles = 20;
	while(cycles)
	{
		gpioPinWrite(gpio_port, gpio_pin, HIGH);
 2e4:	4f ef       	ldi	r20, 0xFF	; 255
 2e6:	6d 2f       	mov	r22, r29
 2e8:	81 2f       	mov	r24, r17
 2ea:	0e 94 72 00 	call	0xe4	; 0xe4 <gpioPinWrite>
		timer2DelayUs(Ton);
 2ee:	c5 01       	movw	r24, r10
 2f0:	b4 01       	movw	r22, r8
 2f2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <timer2DelayUs>
		gpioPinWrite(gpio_port, gpio_pin, LOW);
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	6d 2f       	mov	r22, r29
 2fa:	81 2f       	mov	r24, r17
 2fc:	0e 94 72 00 	call	0xe4	; 0xe4 <gpioPinWrite>
		timer2DelayUs(Toff);
 300:	c7 01       	movw	r24, r14
 302:	b6 01       	movw	r22, r12
 304:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <timer2DelayUs>
 308:	c1 50       	subi	r28, 0x01	; 1
{
	uint32_t Period = (1.00/u8_frequency)*1000000.00;
	uint32_t Ton = Period * (u8_dutyCycle/100.00);
	uint32_t Toff = Period - Ton;
	uint8_t cycles = 20;
	while(cycles)
 30a:	61 f7       	brne	.-40     	; 0x2e4 <timer2SwPWM+0x8e>
		timer2DelayUs(Ton);
		gpioPinWrite(gpio_port, gpio_pin, LOW);
		timer2DelayUs(Toff);
		cycles--;
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	bf 90       	pop	r11
 31c:	af 90       	pop	r10
 31e:	9f 90       	pop	r9
 320:	8f 90       	pop	r8
 322:	08 95       	ret

00000324 <__divsf3>:
 324:	0e 94 a6 01 	call	0x34c	; 0x34c <__divsf3x>
 328:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_round>
 32c:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscB>
 330:	58 f0       	brcs	.+22     	; 0x348 <__divsf3+0x24>
 332:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fp_pscA>
 336:	40 f0       	brcs	.+16     	; 0x348 <__divsf3+0x24>
 338:	29 f4       	brne	.+10     	; 0x344 <__divsf3+0x20>
 33a:	5f 3f       	cpi	r21, 0xFF	; 255
 33c:	29 f0       	breq	.+10     	; 0x348 <__divsf3+0x24>
 33e:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 342:	51 11       	cpse	r21, r1
 344:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>
 348:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_nan>

0000034c <__divsf3x>:
 34c:	0e 94 98 02 	call	0x530	; 0x530 <__fp_split3>
 350:	68 f3       	brcs	.-38     	; 0x32c <__divsf3+0x8>

00000352 <__divsf3_pse>:
 352:	99 23       	and	r25, r25
 354:	b1 f3       	breq	.-20     	; 0x342 <__divsf3+0x1e>
 356:	55 23       	and	r21, r21
 358:	91 f3       	breq	.-28     	; 0x33e <__divsf3+0x1a>
 35a:	95 1b       	sub	r25, r21
 35c:	55 0b       	sbc	r21, r21
 35e:	bb 27       	eor	r27, r27
 360:	aa 27       	eor	r26, r26
 362:	62 17       	cp	r22, r18
 364:	73 07       	cpc	r23, r19
 366:	84 07       	cpc	r24, r20
 368:	38 f0       	brcs	.+14     	; 0x378 <__divsf3_pse+0x26>
 36a:	9f 5f       	subi	r25, 0xFF	; 255
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	44 1f       	adc	r20, r20
 374:	aa 1f       	adc	r26, r26
 376:	a9 f3       	breq	.-22     	; 0x362 <__divsf3_pse+0x10>
 378:	35 d0       	rcall	.+106    	; 0x3e4 <__divsf3_pse+0x92>
 37a:	0e 2e       	mov	r0, r30
 37c:	3a f0       	brmi	.+14     	; 0x38c <__divsf3_pse+0x3a>
 37e:	e0 e8       	ldi	r30, 0x80	; 128
 380:	32 d0       	rcall	.+100    	; 0x3e6 <__divsf3_pse+0x94>
 382:	91 50       	subi	r25, 0x01	; 1
 384:	50 40       	sbci	r21, 0x00	; 0
 386:	e6 95       	lsr	r30
 388:	00 1c       	adc	r0, r0
 38a:	ca f7       	brpl	.-14     	; 0x37e <__divsf3_pse+0x2c>
 38c:	2b d0       	rcall	.+86     	; 0x3e4 <__divsf3_pse+0x92>
 38e:	fe 2f       	mov	r31, r30
 390:	29 d0       	rcall	.+82     	; 0x3e4 <__divsf3_pse+0x92>
 392:	66 0f       	add	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	88 1f       	adc	r24, r24
 398:	bb 1f       	adc	r27, r27
 39a:	26 17       	cp	r18, r22
 39c:	37 07       	cpc	r19, r23
 39e:	48 07       	cpc	r20, r24
 3a0:	ab 07       	cpc	r26, r27
 3a2:	b0 e8       	ldi	r27, 0x80	; 128
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <__divsf3_pse+0x56>
 3a6:	bb 0b       	sbc	r27, r27
 3a8:	80 2d       	mov	r24, r0
 3aa:	bf 01       	movw	r22, r30
 3ac:	ff 27       	eor	r31, r31
 3ae:	93 58       	subi	r25, 0x83	; 131
 3b0:	5f 4f       	sbci	r21, 0xFF	; 255
 3b2:	3a f0       	brmi	.+14     	; 0x3c2 <__divsf3_pse+0x70>
 3b4:	9e 3f       	cpi	r25, 0xFE	; 254
 3b6:	51 05       	cpc	r21, r1
 3b8:	78 f0       	brcs	.+30     	; 0x3d8 <__divsf3_pse+0x86>
 3ba:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 3be:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>
 3c2:	5f 3f       	cpi	r21, 0xFF	; 255
 3c4:	e4 f3       	brlt	.-8      	; 0x3be <__divsf3_pse+0x6c>
 3c6:	98 3e       	cpi	r25, 0xE8	; 232
 3c8:	d4 f3       	brlt	.-12     	; 0x3be <__divsf3_pse+0x6c>
 3ca:	86 95       	lsr	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	f7 95       	ror	r31
 3d4:	9f 5f       	subi	r25, 0xFF	; 255
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <__divsf3_pse+0x78>
 3d8:	88 0f       	add	r24, r24
 3da:	91 1d       	adc	r25, r1
 3dc:	96 95       	lsr	r25
 3de:	87 95       	ror	r24
 3e0:	97 f9       	bld	r25, 7
 3e2:	08 95       	ret
 3e4:	e1 e0       	ldi	r30, 0x01	; 1
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	bb 1f       	adc	r27, r27
 3ee:	62 17       	cp	r22, r18
 3f0:	73 07       	cpc	r23, r19
 3f2:	84 07       	cpc	r24, r20
 3f4:	ba 07       	cpc	r27, r26
 3f6:	20 f0       	brcs	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	62 1b       	sub	r22, r18
 3fa:	73 0b       	sbc	r23, r19
 3fc:	84 0b       	sbc	r24, r20
 3fe:	ba 0b       	sbc	r27, r26
 400:	ee 1f       	adc	r30, r30
 402:	88 f7       	brcc	.-30     	; 0x3e6 <__divsf3_pse+0x94>
 404:	e0 95       	com	r30
 406:	08 95       	ret

00000408 <__fixunssfsi>:
 408:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_splitA>
 40c:	88 f0       	brcs	.+34     	; 0x430 <__fixunssfsi+0x28>
 40e:	9f 57       	subi	r25, 0x7F	; 127
 410:	98 f0       	brcs	.+38     	; 0x438 <__fixunssfsi+0x30>
 412:	b9 2f       	mov	r27, r25
 414:	99 27       	eor	r25, r25
 416:	b7 51       	subi	r27, 0x17	; 23
 418:	b0 f0       	brcs	.+44     	; 0x446 <__fixunssfsi+0x3e>
 41a:	e1 f0       	breq	.+56     	; 0x454 <__fixunssfsi+0x4c>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	1a f0       	brmi	.+6      	; 0x42c <__fixunssfsi+0x24>
 426:	ba 95       	dec	r27
 428:	c9 f7       	brne	.-14     	; 0x41c <__fixunssfsi+0x14>
 42a:	14 c0       	rjmp	.+40     	; 0x454 <__fixunssfsi+0x4c>
 42c:	b1 30       	cpi	r27, 0x01	; 1
 42e:	91 f0       	breq	.+36     	; 0x454 <__fixunssfsi+0x4c>
 430:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_zero>
 434:	b1 e0       	ldi	r27, 0x01	; 1
 436:	08 95       	ret
 438:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_zero>
 43c:	67 2f       	mov	r22, r23
 43e:	78 2f       	mov	r23, r24
 440:	88 27       	eor	r24, r24
 442:	b8 5f       	subi	r27, 0xF8	; 248
 444:	39 f0       	breq	.+14     	; 0x454 <__fixunssfsi+0x4c>
 446:	b9 3f       	cpi	r27, 0xF9	; 249
 448:	cc f3       	brlt	.-14     	; 0x43c <__fixunssfsi+0x34>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b3 95       	inc	r27
 452:	d9 f7       	brne	.-10     	; 0x44a <__fixunssfsi+0x42>
 454:	3e f4       	brtc	.+14     	; 0x464 <__fixunssfsi+0x5c>
 456:	90 95       	com	r25
 458:	80 95       	com	r24
 45a:	70 95       	com	r23
 45c:	61 95       	neg	r22
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	08 95       	ret

00000466 <__floatunsisf>:
 466:	e8 94       	clt
 468:	09 c0       	rjmp	.+18     	; 0x47c <__floatsisf+0x12>

0000046a <__floatsisf>:
 46a:	97 fb       	bst	r25, 7
 46c:	3e f4       	brtc	.+14     	; 0x47c <__floatsisf+0x12>
 46e:	90 95       	com	r25
 470:	80 95       	com	r24
 472:	70 95       	com	r23
 474:	61 95       	neg	r22
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	99 23       	and	r25, r25
 47e:	a9 f0       	breq	.+42     	; 0x4aa <__floatsisf+0x40>
 480:	f9 2f       	mov	r31, r25
 482:	96 e9       	ldi	r25, 0x96	; 150
 484:	bb 27       	eor	r27, r27
 486:	93 95       	inc	r25
 488:	f6 95       	lsr	r31
 48a:	87 95       	ror	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f1 11       	cpse	r31, r1
 494:	f8 cf       	rjmp	.-16     	; 0x486 <__floatsisf+0x1c>
 496:	fa f4       	brpl	.+62     	; 0x4d6 <__floatsisf+0x6c>
 498:	bb 0f       	add	r27, r27
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__floatsisf+0x36>
 49c:	60 ff       	sbrs	r22, 0
 49e:	1b c0       	rjmp	.+54     	; 0x4d6 <__floatsisf+0x6c>
 4a0:	6f 5f       	subi	r22, 0xFF	; 255
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	16 c0       	rjmp	.+44     	; 0x4d6 <__floatsisf+0x6c>
 4aa:	88 23       	and	r24, r24
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <__floatsisf+0x48>
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	11 c0       	rjmp	.+34     	; 0x4d4 <__floatsisf+0x6a>
 4b2:	77 23       	and	r23, r23
 4b4:	21 f0       	breq	.+8      	; 0x4be <__floatsisf+0x54>
 4b6:	9e e8       	ldi	r25, 0x8E	; 142
 4b8:	87 2f       	mov	r24, r23
 4ba:	76 2f       	mov	r23, r22
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__floatsisf+0x5e>
 4be:	66 23       	and	r22, r22
 4c0:	71 f0       	breq	.+28     	; 0x4de <__floatsisf+0x74>
 4c2:	96 e8       	ldi	r25, 0x86	; 134
 4c4:	86 2f       	mov	r24, r22
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	2a f0       	brmi	.+10     	; 0x4d6 <__floatsisf+0x6c>
 4cc:	9a 95       	dec	r25
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	da f7       	brpl	.-10     	; 0x4cc <__floatsisf+0x62>
 4d6:	88 0f       	add	r24, r24
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	97 f9       	bld	r25, 7
 4de:	08 95       	ret

000004e0 <__fp_inf>:
 4e0:	97 f9       	bld	r25, 7
 4e2:	9f 67       	ori	r25, 0x7F	; 127
 4e4:	80 e8       	ldi	r24, 0x80	; 128
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	08 95       	ret

000004ec <__fp_nan>:
 4ec:	9f ef       	ldi	r25, 0xFF	; 255
 4ee:	80 ec       	ldi	r24, 0xC0	; 192
 4f0:	08 95       	ret

000004f2 <__fp_pscA>:
 4f2:	00 24       	eor	r0, r0
 4f4:	0a 94       	dec	r0
 4f6:	16 16       	cp	r1, r22
 4f8:	17 06       	cpc	r1, r23
 4fa:	18 06       	cpc	r1, r24
 4fc:	09 06       	cpc	r0, r25
 4fe:	08 95       	ret

00000500 <__fp_pscB>:
 500:	00 24       	eor	r0, r0
 502:	0a 94       	dec	r0
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	14 06       	cpc	r1, r20
 50a:	05 06       	cpc	r0, r21
 50c:	08 95       	ret

0000050e <__fp_round>:
 50e:	09 2e       	mov	r0, r25
 510:	03 94       	inc	r0
 512:	00 0c       	add	r0, r0
 514:	11 f4       	brne	.+4      	; 0x51a <__fp_round+0xc>
 516:	88 23       	and	r24, r24
 518:	52 f0       	brmi	.+20     	; 0x52e <__fp_round+0x20>
 51a:	bb 0f       	add	r27, r27
 51c:	40 f4       	brcc	.+16     	; 0x52e <__fp_round+0x20>
 51e:	bf 2b       	or	r27, r31
 520:	11 f4       	brne	.+4      	; 0x526 <__fp_round+0x18>
 522:	60 ff       	sbrs	r22, 0
 524:	04 c0       	rjmp	.+8      	; 0x52e <__fp_round+0x20>
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	08 95       	ret

00000530 <__fp_split3>:
 530:	57 fd       	sbrc	r21, 7
 532:	90 58       	subi	r25, 0x80	; 128
 534:	44 0f       	add	r20, r20
 536:	55 1f       	adc	r21, r21
 538:	59 f0       	breq	.+22     	; 0x550 <__fp_splitA+0x10>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	71 f0       	breq	.+28     	; 0x55a <__fp_splitA+0x1a>
 53e:	47 95       	ror	r20

00000540 <__fp_splitA>:
 540:	88 0f       	add	r24, r24
 542:	97 fb       	bst	r25, 7
 544:	99 1f       	adc	r25, r25
 546:	61 f0       	breq	.+24     	; 0x560 <__fp_splitA+0x20>
 548:	9f 3f       	cpi	r25, 0xFF	; 255
 54a:	79 f0       	breq	.+30     	; 0x56a <__fp_splitA+0x2a>
 54c:	87 95       	ror	r24
 54e:	08 95       	ret
 550:	12 16       	cp	r1, r18
 552:	13 06       	cpc	r1, r19
 554:	14 06       	cpc	r1, r20
 556:	55 1f       	adc	r21, r21
 558:	f2 cf       	rjmp	.-28     	; 0x53e <__fp_split3+0xe>
 55a:	46 95       	lsr	r20
 55c:	f1 df       	rcall	.-30     	; 0x540 <__fp_splitA>
 55e:	08 c0       	rjmp	.+16     	; 0x570 <__fp_splitA+0x30>
 560:	16 16       	cp	r1, r22
 562:	17 06       	cpc	r1, r23
 564:	18 06       	cpc	r1, r24
 566:	99 1f       	adc	r25, r25
 568:	f1 cf       	rjmp	.-30     	; 0x54c <__fp_splitA+0xc>
 56a:	86 95       	lsr	r24
 56c:	71 05       	cpc	r23, r1
 56e:	61 05       	cpc	r22, r1
 570:	08 94       	sec
 572:	08 95       	ret

00000574 <__fp_zero>:
 574:	e8 94       	clt

00000576 <__fp_szero>:
 576:	bb 27       	eor	r27, r27
 578:	66 27       	eor	r22, r22
 57a:	77 27       	eor	r23, r23
 57c:	cb 01       	movw	r24, r22
 57e:	97 f9       	bld	r25, 7
 580:	08 95       	ret

00000582 <__mulsf3>:
 582:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__mulsf3x>
 586:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_round>
 58a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fp_pscA>
 58e:	38 f0       	brcs	.+14     	; 0x59e <__mulsf3+0x1c>
 590:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscB>
 594:	20 f0       	brcs	.+8      	; 0x59e <__mulsf3+0x1c>
 596:	95 23       	and	r25, r21
 598:	11 f0       	breq	.+4      	; 0x59e <__mulsf3+0x1c>
 59a:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 59e:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_nan>
 5a2:	11 24       	eor	r1, r1
 5a4:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>

000005a8 <__mulsf3x>:
 5a8:	0e 94 98 02 	call	0x530	; 0x530 <__fp_split3>
 5ac:	70 f3       	brcs	.-36     	; 0x58a <__mulsf3+0x8>

000005ae <__mulsf3_pse>:
 5ae:	95 9f       	mul	r25, r21
 5b0:	c1 f3       	breq	.-16     	; 0x5a2 <__mulsf3+0x20>
 5b2:	95 0f       	add	r25, r21
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	55 1f       	adc	r21, r21
 5b8:	62 9f       	mul	r22, r18
 5ba:	f0 01       	movw	r30, r0
 5bc:	72 9f       	mul	r23, r18
 5be:	bb 27       	eor	r27, r27
 5c0:	f0 0d       	add	r31, r0
 5c2:	b1 1d       	adc	r27, r1
 5c4:	63 9f       	mul	r22, r19
 5c6:	aa 27       	eor	r26, r26
 5c8:	f0 0d       	add	r31, r0
 5ca:	b1 1d       	adc	r27, r1
 5cc:	aa 1f       	adc	r26, r26
 5ce:	64 9f       	mul	r22, r20
 5d0:	66 27       	eor	r22, r22
 5d2:	b0 0d       	add	r27, r0
 5d4:	a1 1d       	adc	r26, r1
 5d6:	66 1f       	adc	r22, r22
 5d8:	82 9f       	mul	r24, r18
 5da:	22 27       	eor	r18, r18
 5dc:	b0 0d       	add	r27, r0
 5de:	a1 1d       	adc	r26, r1
 5e0:	62 1f       	adc	r22, r18
 5e2:	73 9f       	mul	r23, r19
 5e4:	b0 0d       	add	r27, r0
 5e6:	a1 1d       	adc	r26, r1
 5e8:	62 1f       	adc	r22, r18
 5ea:	83 9f       	mul	r24, r19
 5ec:	a0 0d       	add	r26, r0
 5ee:	61 1d       	adc	r22, r1
 5f0:	22 1f       	adc	r18, r18
 5f2:	74 9f       	mul	r23, r20
 5f4:	33 27       	eor	r19, r19
 5f6:	a0 0d       	add	r26, r0
 5f8:	61 1d       	adc	r22, r1
 5fa:	23 1f       	adc	r18, r19
 5fc:	84 9f       	mul	r24, r20
 5fe:	60 0d       	add	r22, r0
 600:	21 1d       	adc	r18, r1
 602:	82 2f       	mov	r24, r18
 604:	76 2f       	mov	r23, r22
 606:	6a 2f       	mov	r22, r26
 608:	11 24       	eor	r1, r1
 60a:	9f 57       	subi	r25, 0x7F	; 127
 60c:	50 40       	sbci	r21, 0x00	; 0
 60e:	9a f0       	brmi	.+38     	; 0x636 <__mulsf3_pse+0x88>
 610:	f1 f0       	breq	.+60     	; 0x64e <__mulsf3_pse+0xa0>
 612:	88 23       	and	r24, r24
 614:	4a f0       	brmi	.+18     	; 0x628 <__mulsf3_pse+0x7a>
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	bb 1f       	adc	r27, r27
 61c:	66 1f       	adc	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	91 50       	subi	r25, 0x01	; 1
 624:	50 40       	sbci	r21, 0x00	; 0
 626:	a9 f7       	brne	.-22     	; 0x612 <__mulsf3_pse+0x64>
 628:	9e 3f       	cpi	r25, 0xFE	; 254
 62a:	51 05       	cpc	r21, r1
 62c:	80 f0       	brcs	.+32     	; 0x64e <__mulsf3_pse+0xa0>
 62e:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 632:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	e4 f3       	brlt	.-8      	; 0x632 <__mulsf3_pse+0x84>
 63a:	98 3e       	cpi	r25, 0xE8	; 232
 63c:	d4 f3       	brlt	.-12     	; 0x632 <__mulsf3_pse+0x84>
 63e:	86 95       	lsr	r24
 640:	77 95       	ror	r23
 642:	67 95       	ror	r22
 644:	b7 95       	ror	r27
 646:	f7 95       	ror	r31
 648:	e7 95       	ror	r30
 64a:	9f 5f       	subi	r25, 0xFF	; 255
 64c:	c1 f7       	brne	.-16     	; 0x63e <__mulsf3_pse+0x90>
 64e:	fe 2b       	or	r31, r30
 650:	88 0f       	add	r24, r24
 652:	91 1d       	adc	r25, r1
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	97 f9       	bld	r25, 7
 65a:	08 95       	ret

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
